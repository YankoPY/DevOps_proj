name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  Linter:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Super-Linter
        # You may pin to the exact commit or the version.
        # uses: super-linter/super-linter@a8150b40c89574adb5f68bf9502b890a236a06b3
        uses: super-linter/super-linter@v5.7.2
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  Trivy:
    runs-on: ubuntu-20.04
    needs: Linter
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build an image from Dockerfile
        run: |
          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

 # SAST:
  #  runs-on: ubuntu-latest
  #  needs: Linter
   # steps:
   #   - name: Checkout code
    #    uses: actions/checkout@v2

   #   - name: Install CodeQL
      #  uses: github/codeql-action/init@v1
     #   with:
      #   languages: all

     # - name: Build CodeQL database
      #  uses: github/codeql-action/analyze@v1
     #   with:
      #    queries: .

 # Git-Secrets:
 #   runs-on: ubuntu-latest
 #   needs: Linter
 #   steps:
 #     - name: Checkout code
 #       uses: actions/checkout@v2

 #     - name: Scan for Git Secrets
 #       uses: git-secrets/scan@master


 # Secrets-Management:
 #   runs-on: ubuntu-latest
 #   needs: Linter
 #   steps:
 #     - name: Install Secrets Management Tool
 #       run: |
 #         # Install and configure a secrets management tool

 #     - name: Use Secrets Management Tool
 #       run: |
 #         # Use the secrets management tool to handle secrets

 # IaC-Security:
  #  runs-on: ubuntu-latest
   # needs: Linter
   # steps:
    #  - name: Install IaC Security Tools
    #    run: |
    #      # Install and configure tools for IaC security

  #    - name: Run IaC Security Checks
     #   run: |
   #       # Run IaC security checks on your infrastructure code

#  Automated-Testing:
#    runs-on: ubuntu-latest
#    needs: Linter
#    steps:
 #     - name: Run Unit Tests
 #       run: |
  #        # Run your unit tests
#
   #   - name: Run Integration Tests
  #      run: |
          # Run your integration tests

   #   - name: Run E2E Tests
    #    run: |
    #      # Run your end-to-end tests

#  Compliance-Checks:
 #   runs-on: ubuntu-latest
  #  needs: Linter
  #  steps:
  #   - name: Perform Compliance Checks
  #      run: |
  #        # Implement compliance checks based on your requirements

  #sonarcloud:
    #runs-on: ubuntu-latest
    #steps:
    #- uses: actions/checkout@v3
      #with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        #fetch-depth: 0
    #- name: SonarCloud Scan
     # uses: sonarsource/sonarcloud-github-action@master
      #env:
       # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  UnitTest:
    needs: Linter
    runs-on: ubuntu-latest
    steps:
       - name: Checkout
         uses: actions/checkout@v1
      
       - name: Set up JDK 20
         uses: actions/setup-java@v2
         with:
          java-version: '20'
          distribution: 'adopt'
          
       - name: Build
         run: mvn --batch-mode -DskipTests package
          
       - name: Test
         run: mvn --batch-mode -Dmaven.test.failure.ignore=true test     
       - name: Report
         uses: dorny/test-reporter@v1
         if: always()
         with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

  Docker:
    runs-on: ubuntu-latest
    needs: [Trivy, UnitTest]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_REPO }}
  Kubernetes-Azure:
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@master

         - uses: Azure/docker-login@v1
           with:
              login-server: contoso.azurecr.io
              username: ${{ secrets.REGISTRY_USERNAME }}
              password: ${{ secrets.REGISTRY_PASSWORD }}

         - run: |
              docker build . -t contoso.azurecr.io/k8sdemo:${{ github.sha }}
              docker push contoso.azurecr.io/k8sdemo:${{ github.sha }}

         - uses: azure/setup-kubectl@v2.0

         - uses: Azure/k8s-set-context@v2
           with:
              kubeconfig: ${{ secrets.KUBE_CONFIG }}

         - uses: Azure/k8s-create-secret@v1.1
           with:
              container-registry-url: contoso.azurecr.io
              container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
              container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
              secret-name: demo-k8s-secret

         - uses: Azure/k8s-deploy@v4
           with:
              action: deploy
              manifests: |
                 manifests/deployment.yml
                 manifests/service.yml
              images: |
                 demo.azurecr.io/k8sdemo:${{ github.sha }}
              imagepullsecrets: |
                 demo-k8s-secret
